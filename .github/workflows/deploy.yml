# .github/workflows/deploy.yml

# GitHub Actions 워크플로우의 이름을 지정합니다. GitHub 'Actions' 탭에 이 이름이 표시됩니다.
name: Deploy to Amazon ECS # Cache bust 1


# 언제 이 워크플로우를 실행할지 트리거(trigger)를 정의합니다.
on:
  push:
    branches:
      - main  # 'main' 브랜치에 코드가 푸시(push)될 때마다 자동으로 실행됩니다.

# 워크플로우에서 공통으로 사용할 환경 변수를 설정합니다.
# 이 값들은 자신의 AWS 환경에 맞게 정확히 입력해야 합니다.
env:
  AWS_REGION: ap-northeast-2                   # AWS 리전 (서울)
  ECR_REPOSITORY: mic-project                  # Docker 이미지를 저장할 ECR 리포지토리 이름
  ECS_SERVICE: mic-project-service             # 업데이트할 ECS 서비스 이름
  ECS_CLUSTER: mic-project-cluster             # 서비스가 속한 ECS 클러스터 이름
#  ECS_TASK_DEFINITION: mic-project-task-def-v2 # 배포에 사용할 ECS 작업 정의 이름 (가장 최신 버전)
  CONTAINER_NAME: mic-project-app              # 작업 정의 안의 컨테이너 이름

# 실제 수행할 작업(job)들을 정의합니다. 'deploy'라는 이름의 작업을 하나만 정의합니다.
jobs:
  deploy:
    name: Deploy
    # 이 작업은 우분투(리눅스) 최신 버전 환경의 가상 머신에서 실행됩니다.
    runs-on: ubuntu-latest
    # 이 작업은 리포지토리의 코드를 읽을 수 있는 기본적인 권한이 필요합니다.
    permissions:
      contents: read

    # 실제 수행될 단계(step)들을 순서대로 정의합니다.
    steps:
    # 1. GitHub 리포지토리의 소스 코드를 가상 머신으로 가져옵니다(checkout).
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. GitHub Secrets에 저장된 AWS 자격 증명을 사용하여 AWS에 로그인합니다.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # 3. AWS ECR(Docker 이미지 저장소)에 로그인합니다.
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # 4. Docker 이미지를 빌드하고, 태그를 붙인 후, ECR에 푸시합니다.
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        # ECR 레지스트리 주소와 이미지 태그를 환경 변수로 설정합니다.
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # 이미지 태그는 Git 커밋의 고유 ID(SHA)를 사용하여, 어떤 코드 버전의 이미지인지 명확히 합니다.
        IMAGE_TAG: ${{ github.sha }}
      working-directory: ./backend
      run: |
        docker build --platform linux/amd64 -t $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # 5. 새로운 이미지 정보를 기반으로 새로운 ECS 작업 정의 파일을 동적으로 생성합니다.
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./backend/task-definition.json # 프로젝트 내의 JSON 파일을 직접 지정
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    # 6. 새로 생성된 작업 정의를 사용하여 ECS 서비스를 업데이트(배포)합니다.
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}

        wait-for-service-stability: true