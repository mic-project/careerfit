package com.codelab.micproject.resume.entity;

import jakarta.persistence.*;                 //  JPA annotations (Entity, Id, Column, etc.)
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;

/**
 * Entity class representing resume analysis records.
 * This will be mapped to the "resume_analysis" table in the database.
 */
@Entity
@Table(
        name = "resume_analysis",
        indexes = {
                // Indexes for faster queries (e.g., find by user, status, createdAt, requestId)
                @Index(name = "idx_user_status_created_request", columnList = "user_id, status, created_at, request_id")
        }
)
@Getter
@Setter
public class ResumeAnalysis {

    /**
     * Primary key of the entity (auto-increment).
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Unique request identifier (e.g., for idempotency or tracking).
     */
    @Column(name = "request_id", nullable = false, unique = true, length = 100)
    private String requestId;

    /**
     * User ID who submitted this resume.
     * (Optional: can be linked to a User entity in the future.)
     */
    @Column(name = "user_id", nullable = true)
    private Long userId;

    /**
     * Original uploaded filename.
     */
    @Column(name = "filename")
    private String filename;

    @Column(name = "language", length = 8)
    private String language;

    @Column(columnDefinition = "TEXT")
    private String summary;

    @Column(columnDefinition = "TEXT")
    private String suggestionsJson;

    @Column(columnDefinition = "TEXT")
    private String rawTextPreview;

    @Column(name = "model", length = 64)
    private String model;


    /**
     * MIME type of the uploaded file (e.g., application/pdf, application/vnd.openxmlformats-officedocument.wordprocessingml.document).
     */
    @Column(name = "content_type")
    private String contentType;

    /**
     * File size in bytes.
     */
    @Column(name = "file_size")
    private Long fileSize;

    /**
     * Extracted plain text from the uploaded resume file.
     * Using @Lob allows large text content (CLOB).
     */
    @Lob
    @Column(name = "raw_text", columnDefinition = "LONGTEXT")
    private String rawText;

    /**
     * Suggestions or analysis result generated by GPT.
     * Stored as JSON string or Markdown text.
     */
    @Lob
    @Column(name = "suggestions", columnDefinition = "LONGTEXT")
    private String suggestions;

    /**
     * Status of this analysis process.
     * Example values: PENDING, PARSED, ANALYZED, FAILED.
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false, length = 20)
    private Status status = Status.PENDING;

    /**
     * Error message if the analysis failed.
     */
    @Column(name = "error_message")
    private String errorMessage;

    /**
     * The time when this record is created.
     * Automatically set when first persisted.
     */
    @CreationTimestamp
    @Column(name = "created_at", updatable = false, nullable = false)
    private LocalDateTime createdAt;

    /**
     * The time when this record is last updated.
     * Automatically updated on every change.
     */
    @UpdateTimestamp
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    /**
     * Enum representing possible states of resume analysis.
     */
    public enum Status {
        PENDING,    // Just created, waiting for parsing/analysis
        PARSED,     // File has been parsed into text
        ANALYZED,   // GPT suggestions generated
        FAILED      // Error occurred during process
    }
}
